package com.company.security;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import org.springframework.stereotype.Component;

import java.util.Date;

@Component
public class JwtUtil {

    private static final String SECRET_KEY = "secret";

    // Generate JWT token
    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24)) // 24 hours
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    // Validate JWT token and return the username if valid
    public String validateToken(String token) throws Exception {
        try {
            return Jwts.parser()
                    .setSigningKey(SECRET_KEY)
                    .parseClaimsJws(token)
                    .getBody()
                    .getSubject();
        } catch (ExpiredJwtException e) {
            throw new Exception("JWT token is expired", e);
        } catch (UnsupportedJwtException e) {
            throw new Exception("JWT token is unsupported", e);
        } catch (SignatureException e) {
            throw new Exception("Invalid JWT signature", e);
        } catch (Exception e) {
            throw new Exception("Invalid JWT token", e);
        }
    }

    // Generate password reset token (shorter expiration time)
    public String generatePasswordResetToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 15)) // 15 minutes
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    // Validate password reset token (same as regular token)
    public String validatePasswordResetToken(String token) throws Exception {
        return validateToken(token);
    }

    // Invalidate token (could be used for blacklisting, etc.)
    public void invalidateToken(String token) {
        // Logic to blacklist token if necessary (e.g., storing it in Redis)
    }
}
